@startuml

package board{
abstract class Board{
# Tile[][] board
# List<Tile> allGround
+ Board(int witdh, int height):void
+ getNbOfTile(int nbFirstTile):int
+ getHeight():int
+ getWitdh():int
- generateBoard():void
- genertateOcean():void
- generateFirstTile():void
- generateOtherTiles(int nbOfTile):void
- checkValidity(int posX, int posY):boolean
- createTile(int nb, int x, int y):Tile
+ getAllFreeGround():List<Tile>
+ removeOccupedGround(Tile tile):void
+ getBoardStatus():int
+ showBoard():String
- generateHead(int widht):String
- getStr(int y):String
+ getTile(int x, int y):Tile
+ getOtherTile(Tile tile):List<Tile>
}
class EndGameByBoard{
+ EndGameByBoard():void
}
class FarmBoard{
+ FarmBoard(int witdh, int height):void
}
class WarBoard{
+ WarBoard(int witdh, int height):void
}
}
package character{
class Army{
# int size
# int MAX_SIZE
+ Army(Tile position, Player owner, int size):void
+ getSize():int
+ numberUnitsClaimed():int
+ meet(Army other):String
+ supportArmy(Army other):String
+ fight(Army other):String
+ changeOwner(Player owner):void
+ looseFight():void
+ extendArmy():void
+ setTile(Tile newTile):void
+ receiveReward(int reward):void
}
abstract class Character{
# int gold
# Player owner
# Tile position
+ Character(Tile position, Player owner):void
+ setTile(Tile newTile):void
+ getGold():int
+ getTile():Tile
+ getOwner():Player
+ kill():void
+ changeOwner(Player owner):void
+ numberUnitsClaimed():int
+ addGold(int pay):void
+ toString():String
}
class CharacterException{
+ CharacterException():void
}
class Worker{
+ Worker(Tile position, Player owner):void
+ receiveReward(int i):void
}
}
package gamemode{
class FarmGame{
+ FarmGame(int width, int height, int nbRound):void
+ playOneRound(Player thePlayer, boolean isRandom):String
+ randomFirstAction(Player thePlayer):String
}
abstract class Game{
# Board theBoard
# List<Player> allPlayer
# static Random ALEA
# int nbRound
+ Game(int nbRound):void
+ addPlayer(Player thePlayer):void
+ getPlayer():List<Player>
+ getTheBoard():Board
+ getNbRound():int
+ play():String
}
class WarGame{
+ WarGame(int width, int height, int nbRound):void
+ playOneRound(Player thePlayer, boolean isRandom):String
+ randomFirstAction(Player thePlayer):String
}
}
package player{
class FarmPlayer{
+ FarmPlayer(String name, Board board, boolean isRandom):void
+ doNothing():String
+ deployCharact(int size, int x, int y):String
+ getPoint():int
}
abstract class Player{
# boolean isRandomPlayer
# List<Character> listeChar
# Random ALEA
# int reward
# String name
# Board theboard
+ Player(String name, int reward, Board board, boolean isRandom):void
+ looseChar(Character character):void
+ earnChar(Character character):void
+ harvestTile():String
+ getName():String
- increaseResources(Ressources theRess):void
+ convertAllResources():String
- cleanResources():void
# convertResources(Ressources res):void
+ getRandomTile():Tile
+ isRandom():boolean
+ doNothing():String
+ rewardCharacter():String
+ getNbSoldier():int
+ looseFight(Character character):void
+ getReward():int
+ getNbRessources(Ressources theRess):int
+ getCharacterString():String
+ toString():String
- getRessourcesToString():String
}
class PlayerException{
+ PlayerException():void
}
class WarPlayer{
- int gold
- int nbSoldier
+ WarPlayer(String name, Board board, boolean isRandom):void
+ looseChar(Character character):void
+ getNbSoldier():int
+ deployCharact(int size, int x, int y):String
+ getGold():int
+ getPoint():int
}
}
package tile{
class Desert{
# static int REWARD_COEF
# String STRING_PICT
# static int SIZE_COEF
# static int MAX_SIZE
# static int END_REWARD
+ Desert(int x, int y):void
+ getEndCoef():int
+ getMaxSize():int
+ getSizeCoef():int
+ getRewardCoef():int
+ getHarvest():Ressources
+ toString():String
}
class Forest{
# static int REWARD_COEF
# String STRING_PICT
# static int SIZE_COEF
# static int MAX_SIZE
# static int END_REWARD
+ Forest(int x, int y):void
+ getEndCoef():int
+ getMaxSize():int
+ getSizeCoef():int
+ getRewardCoef():int
+ getHarvest():Ressources
+ toString():String
}
class Hills{
# String STRING_PICT
# static int REWARD_COEF
# static int SIZE_COEF
# static int MAX_SIZE
# static int END_REWARD
+ Hills(int x, int y):void
+ getEndCoef():int
+ getMaxSize():int
+ getSizeCoef():int
+ getRewardCoef():int
+ getHarvest():Ressources
+ toString():String
}
class Plain{
# String STRING_PICT
# static int REWARD_COEF
# static int SIZE_COEF
# static int MAX_SIZE
# static int END_REWARD
+ Plain(int x, int y):void
+ getEndCoef():int
+ getMaxSize():int
+ getSizeCoef():int
+ getRewardCoef():int
+ getHarvest():Ressources
+ toString():String
}
class Sea{
# static String STRING_PICT
+ Sea(int x, int y):void
+ getEndCoef():int
+ getRewardCoef():int
+ getSizeCoef():int
+ getMaxSize():int
+ toString():String
+ getHarvest():Ressources
}
abstract class Tile{
+ Ressources HARVEST_RES
# int x
# int y
# String STRING_PICT
# boolean isEmpty
# Character user
+ Tile(int x, int y):void
+ getX():int
+ getY():int
+ isEmpty():boolean
+ getUser():Character
+ setUser(Character user):void
+ leaveChar():void
}
class WrongTileException{
+ WrongTileException():void
}
}

class MainFarmGame{
}
class MainWarGame{
}
enum Ressources{
- int REWARD
- Ressources():void
+ setReward(int reward):void
+ getReward():int
}


package util{
class Clear{
+ Clear():void
}
class Input{
- static Scanner scanner
}
class Main{
}
}


Desert -- Ressources
Forest -- Ressources
Hills -- Ressources
Plain -- Ressources
Sea -- Ressources
Board -- Tile
Character -- Tile
Character -- Player
Game -- Player
Game -- Board
Player -- Character
Player -- Tile
Tile -- Character
FarmBoard--|>Board
WarBoard--|>Board
Army--|>Character
Worker--|>Character
FarmGame--|>Game
WarGame--|>Game
FarmPlayer--|>Player
WarPlayer--|>Player
Desert--|>Tile
Forest--|>Tile
Hills--|>Tile
Plain--|>Tile
Sea--|>Tile
@enduml 